{"version":3,"file":"DefaultLinkFactory.js","sourceRoot":"","sources":["../../src/link/DefaultLinkFactory.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AACtD,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACxD,OAAO,MAAM,MAAM,iBAAiB,CAAC;AACrC,OAAO,EAAE,oBAAoB,EAAE,MAAM,iCAAiC,CAAC;AAEvE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAEhD,IAAU,CAAC,CAoBV;AApBD,WAAU,CAAC;IACG,WAAS,GAAG,SAAS,CAAA;;;;;;;EAOjC,CAAC;IAEF,MAAM,QAAQ,GAAG,GAAG,CAAA;;eAEN,EAAA,SAAS;EACtB,CAAC;IAEW,MAAI,GAAG,MAAM,CAAC,IAAI,CAAuB;IACnD,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,QAAQ;;;EAG/B,CAAC;AACH,CAAC,EApBS,CAAC,KAAD,CAAC,QAoBV;AAED,MAAM,OAAO,kBAAqE,SAAQ,oBAGzF;IACA,YAAY,IAAI,GAAG,SAAS;QAC3B,KAAK,CAAC,IAAI,CAAC,CAAC;IACb,CAAC;IAED,mBAAmB,CAAC,KAAK;QACxB,OAAO,oBAAC,iBAAiB,IAAC,IAAI,EAAE,KAAK,CAAC,KAAK,EAAE,aAAa,EAAE,IAAI,CAAC,MAAM,GAAI,CAAC;IAC7E,CAAC;IAED,aAAa,CAAC,KAAK;QAClB,OAAO,IAAI,gBAAgB,EAAU,CAAC;IACvC,CAAC;IAED,mBAAmB,CAAC,KAAW,EAAE,QAAiB,EAAE,IAAY;QAC/D,OAAO,CACN,oBAAC,CAAC,CAAC,IAAI,IACN,QAAQ,EAAE,QAAQ,EAClB,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,KAAK,EAC9E,WAAW,EAAE,KAAK,CAAC,UAAU,EAAE,CAAC,KAAK,EACrC,CAAC,EAAE,IAAI,GACN,CACF,CAAC;IACH,CAAC;CACD","sourcesContent":["import * as React from 'react';\r\nimport { DefaultLinkModel } from './DefaultLinkModel';\r\nimport { DefaultLinkWidget } from './DefaultLinkWidget';\r\nimport styled from '@emotion/styled';\r\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core';\r\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\r\nimport { css, keyframes } from '@emotion/react';\r\n\r\nnamespace S {\r\n\texport const Keyframes = keyframes`\r\n\t\tfrom {\r\n\t\t\tstroke-dashoffset: 24;\r\n\t\t}\r\n\t\tto {\r\n\t\t\tstroke-dashoffset: 0;\r\n\t\t}\r\n\t`;\r\n\r\n\tconst selected = css`\r\n\t\tstroke-dasharray: 10, 2;\r\n\t\tanimation: ${Keyframes} 1s linear infinite;\r\n\t`;\r\n\r\n\texport const Path = styled.path<{ selected: boolean }>`\r\n\t\t${(p) => p.selected && selected};\r\n\t\tfill: none;\r\n\t\tpointer-events: auto;\r\n\t`;\r\n}\r\n\r\nexport class DefaultLinkFactory<Link extends DefaultLinkModel = DefaultLinkModel> extends AbstractReactFactory<\r\n\tLink,\r\n\tDiagramEngine\r\n> {\r\n\tconstructor(type = 'default') {\r\n\t\tsuper(type);\r\n\t}\r\n\r\n\tgenerateReactWidget(event): JSX.Element {\r\n\t\treturn <DefaultLinkWidget link={event.model} diagramEngine={this.engine} />;\r\n\t}\r\n\r\n\tgenerateModel(event): Link {\r\n\t\treturn new DefaultLinkModel() as Link;\r\n\t}\r\n\r\n\tgenerateLinkSegment(model: Link, selected: boolean, path: string) {\r\n\t\treturn (\r\n\t\t\t<S.Path\r\n\t\t\t\tselected={selected}\r\n\t\t\t\tstroke={selected ? model.getOptions().selectedColor : model.getOptions().color}\r\n\t\t\t\tstrokeWidth={model.getOptions().width}\r\n\t\t\t\td={path}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n"]}
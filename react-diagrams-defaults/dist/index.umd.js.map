{"version":3,"file":"index.umd.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACrBA;AAWA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;;;;;;;;;;;;;;;;;;;ACnCA;AAEA;AAMA;AAAA;AACA;;;;;;;;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;;;;;;;AAOA;AAEA;;AAEA;AACA;AAEA;AACA;;;AAGA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAQA;AACA;;;;;;;;;;;;;;;;;;;;ACxDA;AASA;AACA;AAuBA;AACA;AACA;AAQA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC/GA;AAEA;AAYA;AAAA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAMA;AAGA;AACA;AAEA;AACA;AAUA;AACA;;;;;;;;;;;;;;;;;ACxDA;AAgBA;AACA;AACA;AAOA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;AC1DA;AACA;AACA;AAEA;AACA;AAUA;AACA;AACA;AAEA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AAQA;AAEA;AACA;AAaA;AAEA;AACA;AACA;AAEA;AACA;AAIA;;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;ACnIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AAYA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC7HA;AACA;AAGA;AACA;AAEA;AAAA;AACA;AACA;;;;;;;AAOA;AACA;AAEA;;;;;AAKA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;;;;;;;;;;AAYA;AACA;AAOA;;;AAGA;AACA;AAAA;;AACA;AACA;AACA;AAmBA;AAjBA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAIA;AACA;;;;;;;;;;;;;;;;;;AClFA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AAEA;AAOA;AAAA;AACA;;;;AAIA;AAEA;;;AAGA;AAEA;;;;;;;;AAQA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AAEA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;ACjDA;AAOA;AAaA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3EA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA","sources":["webpack://projectstorm/react-diagrams-defaults/webpack/universalModuleDefinition","webpack://projectstorm/react-diagrams-defaults/./src/label/DefaultLabelFactory.tsx","webpack://projectstorm/react-diagrams-defaults/./src/label/DefaultLabelModel.tsx","webpack://projectstorm/react-diagrams-defaults/./src/label/DefaultLabelWidget.tsx","webpack://projectstorm/react-diagrams-defaults/./src/link/DefaultLinkFactory.tsx","webpack://projectstorm/react-diagrams-defaults/./src/link/DefaultLinkModel.ts","webpack://projectstorm/react-diagrams-defaults/./src/link/DefaultLinkPointWidget.tsx","webpack://projectstorm/react-diagrams-defaults/./src/link/DefaultLinkSegmentWidget.tsx","webpack://projectstorm/react-diagrams-defaults/./src/link/DefaultLinkWidget.tsx","webpack://projectstorm/react-diagrams-defaults/./src/node/DefaultNodeFactory.tsx","webpack://projectstorm/react-diagrams-defaults/./src/node/DefaultNodeModel.ts","webpack://projectstorm/react-diagrams-defaults/./src/node/DefaultNodeWidget.tsx","webpack://projectstorm/react-diagrams-defaults/./src/port/DefaultPortFactory.tsx","webpack://projectstorm/react-diagrams-defaults/./src/port/DefaultPortLabelWidget.tsx","webpack://projectstorm/react-diagrams-defaults/./src/port/DefaultPortModel.ts","webpack://projectstorm/react-diagrams-defaults/external commonjs \"@emotion/react\"","webpack://projectstorm/react-diagrams-defaults/external commonjs \"@emotion/styled\"","webpack://projectstorm/react-diagrams-defaults/external commonjs \"@projectstorm/geometry\"","webpack://projectstorm/react-diagrams-defaults/external commonjs \"@projectstorm/react-canvas-core\"","webpack://projectstorm/react-diagrams-defaults/external commonjs \"@projectstorm/react-diagrams-core\"","webpack://projectstorm/react-diagrams-defaults/external commonjs \"lodash/map\"","webpack://projectstorm/react-diagrams-defaults/external commonjs \"react\"","webpack://projectstorm/react-diagrams-defaults/webpack/bootstrap","webpack://projectstorm/react-diagrams-defaults/webpack/runtime/compat get default export","webpack://projectstorm/react-diagrams-defaults/webpack/runtime/define property getters","webpack://projectstorm/react-diagrams-defaults/webpack/runtime/hasOwnProperty shorthand","webpack://projectstorm/react-diagrams-defaults/webpack/runtime/make namespace object","webpack://projectstorm/react-diagrams-defaults/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"projectstorm/react-diagrams-defaults\"] = factory();\n\telse\n\t\troot[\"projectstorm/react-diagrams-defaults\"] = factory();\n})(self, () => {\nreturn ","import * as React from 'react';\r\nimport { DefaultLabelModel } from './DefaultLabelModel';\r\nimport { DefaultLabelWidget } from './DefaultLabelWidget';\r\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core';\r\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class DefaultLabelFactory extends AbstractReactFactory<DefaultLabelModel, DiagramEngine> {\r\n\tconstructor() {\r\n\t\tsuper('default');\r\n\t}\r\n\r\n\tgenerateReactWidget(event): JSX.Element {\r\n\t\treturn <DefaultLabelWidget model={event.model} />;\r\n\t}\r\n\r\n\tgenerateModel(event): DefaultLabelModel {\r\n\t\treturn new DefaultLabelModel();\r\n\t}\r\n}\r\n","import { LabelModel, LabelModelGenerics, LabelModelOptions } from '@projectstorm/react-diagrams-core';\r\nimport { DeserializeEvent } from '@projectstorm/react-canvas-core';\r\n\r\nexport interface DefaultLabelModelOptions extends LabelModelOptions {\r\n\tlabel?: string;\r\n}\r\n\r\nexport interface DefaultLabelModelGenerics extends LabelModelGenerics {\r\n\tOPTIONS: DefaultLabelModelOptions;\r\n}\r\n\r\nexport class DefaultLabelModel extends LabelModel<DefaultLabelModelGenerics> {\r\n\tconstructor(options: DefaultLabelModelOptions = {}) {\r\n\t\tsuper({\r\n\t\t\toffsetY: options.offsetY == null ? -23 : options.offsetY,\r\n\t\t\ttype: 'default',\r\n\t\t\t...options\r\n\t\t});\r\n\t}\r\n\r\n\tsetLabel(label: string) {\r\n\t\tthis.options.label = label;\r\n\t}\r\n\r\n\tdeserialize(event: DeserializeEvent<this>) {\r\n\t\tsuper.deserialize(event);\r\n\t\tthis.options.label = event.data.label;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn {\r\n\t\t\t...super.serialize(),\r\n\t\t\tlabel: this.options.label\r\n\t\t};\r\n\t}\r\n}\r\n","import * as React from 'react';\r\nimport { DefaultLabelModel } from './DefaultLabelModel';\r\nimport styled from '@emotion/styled';\r\n\r\nexport interface DefaultLabelWidgetProps {\r\n\tmodel: DefaultLabelModel;\r\n}\r\n\r\nnamespace S {\r\n\texport const Label = styled.div`\r\n\t\tbackground: rgba(0, 0, 0, 0.8);\r\n\t\tborder-radius: 5px;\r\n\t\tcolor: white;\r\n\t\tfont-size: 12px;\r\n\t\tpadding: 4px 8px;\r\n\t\tfont-family: sans-serif;\r\n\t\tuser-select: none;\r\n\t`;\r\n}\r\n\r\nexport class DefaultLabelWidget extends React.Component<DefaultLabelWidgetProps> {\r\n\trender() {\r\n\t\treturn <S.Label>{this.props.model.getOptions().label}</S.Label>;\r\n\t}\r\n}\r\n","import * as React from 'react';\r\nimport { DefaultLinkModel } from './DefaultLinkModel';\r\nimport { DefaultLinkWidget } from './DefaultLinkWidget';\r\nimport styled from '@emotion/styled';\r\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core';\r\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\r\nimport { css, keyframes } from '@emotion/react';\r\n\r\nnamespace S {\r\n\texport const Keyframes = keyframes`\r\n\t\tfrom {\r\n\t\t\tstroke-dashoffset: 24;\r\n\t\t}\r\n\t\tto {\r\n\t\t\tstroke-dashoffset: 0;\r\n\t\t}\r\n\t`;\r\n\r\n\tconst selected = css`\r\n\t\tstroke-dasharray: 10, 2;\r\n\t\tanimation: ${Keyframes} 1s linear infinite;\r\n\t`;\r\n\r\n\texport const Path = styled.path<{ selected: boolean }>`\r\n\t\t${(p) => p.selected && selected};\r\n\t\tfill: none;\r\n\t\tpointer-events: auto;\r\n\t`;\r\n}\r\n\r\nexport class DefaultLinkFactory<Link extends DefaultLinkModel = DefaultLinkModel> extends AbstractReactFactory<\r\n\tLink,\r\n\tDiagramEngine\r\n> {\r\n\tconstructor(type = 'default') {\r\n\t\tsuper(type);\r\n\t}\r\n\r\n\tgenerateReactWidget(event): JSX.Element {\r\n\t\treturn <DefaultLinkWidget link={event.model} diagramEngine={this.engine} />;\r\n\t}\r\n\r\n\tgenerateModel(event): Link {\r\n\t\treturn new DefaultLinkModel() as Link;\r\n\t}\r\n\r\n\tgenerateLinkSegment(model: Link, selected: boolean, path: string) {\r\n\t\treturn (\r\n\t\t\t<S.Path\r\n\t\t\t\tselected={selected}\r\n\t\t\t\tstroke={selected ? model.getOptions().selectedColor : model.getOptions().color}\r\n\t\t\t\tstrokeWidth={model.getOptions().width}\r\n\t\t\t\td={path}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n","import {\r\n\tDiagramEngine,\r\n\tLabelModel,\r\n\tLinkModel,\r\n\tLinkModelGenerics,\r\n\tLinkModelListener,\r\n\tPortModel,\r\n\tPortModelAlignment\r\n} from '@projectstorm/react-diagrams-core';\r\nimport { DefaultLabelModel } from '../label/DefaultLabelModel';\r\nimport { BezierCurve } from '@projectstorm/geometry';\r\nimport { BaseEntityEvent, BaseModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\r\n\r\nexport interface DefaultLinkModelListener extends LinkModelListener {\r\n\tcolorChanged?(event: BaseEntityEvent<DefaultLinkModel> & { color: null | string }): void;\r\n\r\n\twidthChanged?(event: BaseEntityEvent<DefaultLinkModel> & { width: 0 | number }): void;\r\n}\r\n\r\nexport interface DefaultLinkModelOptions extends BaseModelOptions {\r\n\twidth?: number;\r\n\tcolor?: string;\r\n\tselectedColor?: string;\r\n\tcurvyness?: number;\r\n\ttype?: string;\r\n\ttestName?: string;\r\n}\r\n\r\nexport interface DefaultLinkModelGenerics extends LinkModelGenerics {\r\n\tLISTENER: DefaultLinkModelListener;\r\n\tOPTIONS: DefaultLinkModelOptions;\r\n}\r\n\r\nexport class DefaultLinkModel extends LinkModel<DefaultLinkModelGenerics> {\r\n\tconstructor(options: DefaultLinkModelOptions = {}) {\r\n\t\tsuper({\r\n\t\t\ttype: 'default',\r\n\t\t\twidth: options.width || 3,\r\n\t\t\tcolor: options.color || 'gray',\r\n\t\t\tselectedColor: options.selectedColor || 'rgb(0,192,255)',\r\n\t\t\tcurvyness: 50,\r\n\t\t\t...options\r\n\t\t});\r\n\t}\r\n\r\n\tcalculateControlOffset(port: PortModel): [number, number] {\r\n\t\tif (port.getOptions().alignment === PortModelAlignment.RIGHT) {\r\n\t\t\treturn [this.options.curvyness, 0];\r\n\t\t} else if (port.getOptions().alignment === PortModelAlignment.LEFT) {\r\n\t\t\treturn [-this.options.curvyness, 0];\r\n\t\t} else if (port.getOptions().alignment === PortModelAlignment.TOP) {\r\n\t\t\treturn [0, -this.options.curvyness];\r\n\t\t}\r\n\t\treturn [0, this.options.curvyness];\r\n\t}\r\n\r\n\tgetSVGPath(): string {\r\n\t\tif (this.points.length == 2) {\r\n\t\t\tconst curve = new BezierCurve();\r\n\t\t\tcurve.setSource(this.getFirstPoint().getPosition());\r\n\t\t\tcurve.setTarget(this.getLastPoint().getPosition());\r\n\t\t\tcurve.setSourceControl(this.getFirstPoint().getPosition().clone());\r\n\t\t\tcurve.setTargetControl(this.getLastPoint().getPosition().clone());\r\n\r\n\t\t\tif (this.sourcePort) {\r\n\t\t\t\tcurve.getSourceControl().translate(...this.calculateControlOffset(this.getSourcePort()));\r\n\t\t\t}\r\n\r\n\t\t\tif (this.targetPort) {\r\n\t\t\t\tcurve.getTargetControl().translate(...this.calculateControlOffset(this.getTargetPort()));\r\n\t\t\t}\r\n\t\t\treturn curve.getSVGCurve();\r\n\t\t}\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn {\r\n\t\t\t...super.serialize(),\r\n\t\t\twidth: this.options.width,\r\n\t\t\tcolor: this.options.color,\r\n\t\t\tcurvyness: this.options.curvyness,\r\n\t\t\tselectedColor: this.options.selectedColor\r\n\t\t};\r\n\t}\r\n\r\n\tdeserialize(event: DeserializeEvent<this>) {\r\n\t\tsuper.deserialize(event);\r\n\t\tthis.options.color = event.data.color;\r\n\t\tthis.options.width = event.data.width;\r\n\t\tthis.options.curvyness = event.data.curvyness;\r\n\t\tthis.options.selectedColor = event.data.selectedColor;\r\n\t}\r\n\r\n\taddLabel(label: LabelModel | string) {\r\n\t\tif (label instanceof LabelModel) {\r\n\t\t\treturn super.addLabel(label);\r\n\t\t}\r\n\t\tlet labelOb = new DefaultLabelModel();\r\n\t\tlabelOb.setLabel(label);\r\n\t\treturn super.addLabel(labelOb);\r\n\t}\r\n\r\n\tsetWidth(width: number) {\r\n\t\tthis.options.width = width;\r\n\t\tthis.fireEvent({ width }, 'widthChanged');\r\n\t}\r\n\r\n\tsetColor(color: string) {\r\n\t\tthis.options.color = color;\r\n\t\tthis.fireEvent({ color }, 'colorChanged');\r\n\t}\r\n}\r\n","import * as React from 'react';\r\nimport { PointModel } from '@projectstorm/react-diagrams-core';\r\nimport styled from '@emotion/styled';\r\n\r\nexport interface DefaultLinkPointWidgetProps {\r\n\tpoint: PointModel;\r\n\tcolor?: string;\r\n\tcolorSelected: string;\r\n}\r\n\r\nexport interface DefaultLinkPointWidgetState {\r\n\tselected: boolean;\r\n}\r\n\r\nnamespace S {\r\n\texport const PointTop = styled.circle`\r\n\t\tpointer-events: all;\r\n\t`;\r\n}\r\n\r\nexport class DefaultLinkPointWidget extends React.Component<DefaultLinkPointWidgetProps, DefaultLinkPointWidgetState> {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tselected: false\r\n\t\t};\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { point } = this.props;\r\n\t\treturn (\r\n\t\t\t<g>\r\n\t\t\t\t<circle\r\n\t\t\t\t\tcx={point.getPosition().x}\r\n\t\t\t\t\tcy={point.getPosition().y}\r\n\t\t\t\t\tr={5}\r\n\t\t\t\t\tfill={this.state.selected || this.props.point.isSelected() ? this.props.colorSelected : this.props.color}\r\n\t\t\t\t/>\r\n\t\t\t\t<S.PointTop\r\n\t\t\t\t\tclassName=\"point\"\r\n\t\t\t\t\tonMouseLeave={() => {\r\n\t\t\t\t\t\tthis.setState({ selected: false });\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonMouseEnter={() => {\r\n\t\t\t\t\t\tthis.setState({ selected: true });\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tdata-id={point.getID()}\r\n\t\t\t\t\tdata-linkid={point.getLink().getID()}\r\n\t\t\t\t\tcx={point.getPosition().x}\r\n\t\t\t\t\tcy={point.getPosition().y}\r\n\t\t\t\t\tr={15}\r\n\t\t\t\t\topacity={0.0}\r\n\t\t\t\t/>\r\n\t\t\t</g>\r\n\t\t);\r\n\t}\r\n}\r\n","import * as React from 'react';\r\nimport { DefaultLinkFactory } from './DefaultLinkFactory';\r\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\r\nimport { DefaultLinkModel } from './DefaultLinkModel';\r\n\r\nexport interface DefaultLinkSegmentWidgetProps {\r\n\tpath: string;\r\n\tlink: DefaultLinkModel;\r\n\tselected: boolean;\r\n\tforwardRef: React.RefObject<SVGPathElement>;\r\n\tfactory: DefaultLinkFactory;\r\n\tdiagramEngine: DiagramEngine;\r\n\tonSelection: (selected: boolean) => any;\r\n\textras: object;\r\n}\r\n\r\nexport class DefaultLinkSegmentWidget extends React.Component<DefaultLinkSegmentWidgetProps> {\r\n\trender() {\r\n\t\tconst Bottom = React.cloneElement(\r\n\t\t\tthis.props.factory.generateLinkSegment(\r\n\t\t\t\tthis.props.link,\r\n\t\t\t\tthis.props.selected || this.props.link.isSelected(),\r\n\t\t\t\tthis.props.path\r\n\t\t\t),\r\n\t\t\t{\r\n\t\t\t\tref: this.props.forwardRef\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tconst Top = React.cloneElement(Bottom, {\r\n\t\t\tstrokeLinecap: 'round',\r\n\t\t\tonMouseLeave: () => {\r\n\t\t\t\tthis.props.onSelection(false);\r\n\t\t\t},\r\n\t\t\tonMouseEnter: () => {\r\n\t\t\t\tthis.props.onSelection(true);\r\n\t\t\t},\r\n\t\t\t...this.props.extras,\r\n\t\t\tref: null,\r\n\t\t\t'data-linkid': this.props.link.getID(),\r\n\t\t\tstrokeOpacity: this.props.selected ? 0.1 : 0,\r\n\t\t\tstrokeWidth: 20,\r\n\t\t\tfill: 'none',\r\n\t\t\tonContextMenu: () => {\r\n\t\t\t\tif (!this.props.link.isLocked()) {\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\tthis.props.link.remove();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<g>\r\n\t\t\t\t{Bottom}\r\n\t\t\t\t{Top}\r\n\t\t\t</g>\r\n\t\t);\r\n\t}\r\n}\r\n","import { DiagramEngine, LinkWidget, PointModel } from '@projectstorm/react-diagrams-core';\r\nimport * as React from 'react';\r\nimport { MouseEvent, useEffect, useRef } from 'react';\r\nimport { DefaultLinkModel } from './DefaultLinkModel';\r\nimport { DefaultLinkPointWidget } from './DefaultLinkPointWidget';\r\nimport { DefaultLinkSegmentWidget } from './DefaultLinkSegmentWidget';\r\n\r\nexport interface DefaultLinkProps {\r\n\tlink: DefaultLinkModel;\r\n\tdiagramEngine: DiagramEngine;\r\n\tpointAdded?: (point: PointModel, event: MouseEvent) => any;\r\n\trenderPoints?: boolean;\r\n\tselected?: (event: MouseEvent) => any;\r\n}\r\n\r\nexport const DefaultLinkWidget: React.FC<DefaultLinkProps> = (props) => {\r\n\tconst [selected, setSelected] = React.useState(false);\r\n\tconst refPaths = useRef<React.RefObject<SVGPathElement>[]>([]);\r\n\r\n\tconst renderPoints = () => {\r\n\t\treturn props.renderPoints ?? true;\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tprops.link.setRenderedPaths(refPaths.current.map((ref) => ref.current).filter(Boolean) as SVGPathElement[]);\r\n\t\treturn () => {\r\n\t\t\tprops.link.setRenderedPaths([]);\r\n\t\t};\r\n\t}, [props.link]);\r\n\r\n\tconst generateRef = () => {\r\n\t\tconst ref = React.createRef<SVGPathElement>();\r\n\t\trefPaths.current.push(ref);\r\n\t\treturn ref;\r\n\t};\r\n\r\n\tconst addPointToLink = (event: MouseEvent, index: number) => {\r\n\t\tif (\r\n\t\t\t!event.shiftKey &&\r\n\t\t\t!props.link.isLocked() &&\r\n\t\t\tprops.link.getPoints().length - 1 <= props.diagramEngine.getMaxNumberPointsPerLink()\r\n\t\t) {\r\n\t\t\tconst position = props.diagramEngine.getRelativeMousePoint(event);\r\n\t\t\tconst point = props.link.point(position.x, position.y, index);\r\n\t\t\tevent.persist();\r\n\t\t\tevent.stopPropagation();\r\n\t\t\tprops.diagramEngine.getActionEventBus().fireAction({\r\n\t\t\t\tevent,\r\n\t\t\t\tmodel: point\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tconst generatePoint = (point: PointModel): JSX.Element => {\r\n\t\treturn (\r\n\t\t\t<DefaultLinkPointWidget\r\n\t\t\t\tkey={point.getID()}\r\n\t\t\t\tpoint={point as any}\r\n\t\t\t\tcolorSelected={props.link.getOptions().selectedColor ?? ''}\r\n\t\t\t\tcolor={props.link.getOptions().color}\r\n\t\t\t/>\r\n\t\t);\r\n\t};\r\n\r\n\tconst generateLink = (path: string, extraProps: any, id: string | number): JSX.Element => {\r\n\t\treturn (\r\n\t\t\t<DefaultLinkSegmentWidget\r\n\t\t\t\tkey={`link-${id}`}\r\n\t\t\t\tpath={path}\r\n\t\t\t\tselected={selected}\r\n\t\t\t\tdiagramEngine={props.diagramEngine}\r\n\t\t\t\tfactory={props.diagramEngine.getFactoryForLink(props.link)}\r\n\t\t\t\tlink={props.link}\r\n\t\t\t\tforwardRef={generateRef()}\r\n\t\t\t\tonSelection={setSelected}\r\n\t\t\t\textras={extraProps}\r\n\t\t\t/>\r\n\t\t);\r\n\t};\r\n\r\n\tconst points = props.link.getPoints();\r\n\tconst paths = [];\r\n\trefPaths.current = []; // Reset the refPaths for the current render\r\n\r\n\tif (points.length === 2) {\r\n\t\tpaths.push(\r\n\t\t\tgenerateLink(\r\n\t\t\t\tprops.link.getSVGPath(),\r\n\t\t\t\t{\r\n\t\t\t\t\tonMouseDown: (event: MouseEvent) => {\r\n\t\t\t\t\t\tprops.selected?.(event);\r\n\t\t\t\t\t\taddPointToLink(event, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t'0'\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\tif (props.link.getTargetPort() == null) {\r\n\t\t\tpaths.push(generatePoint(points[1]));\r\n\t\t}\r\n\t} else {\r\n\t\tfor (let j = 0; j < points.length - 1; j++) {\r\n\t\t\tpaths.push(\r\n\t\t\t\tgenerateLink(\r\n\t\t\t\t\tLinkWidget.generateLinePath(points[j], points[j + 1]),\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t'data-linkid': props.link.getID(),\r\n\t\t\t\t\t\t'data-point': j,\r\n\t\t\t\t\t\tonMouseDown: (event: MouseEvent) => {\r\n\t\t\t\t\t\t\tprops.selected?.(event);\r\n\t\t\t\t\t\t\taddPointToLink(event, j + 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tj\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (renderPoints()) {\r\n\t\t\tfor (let i = 1; i < points.length - 1; i++) {\r\n\t\t\t\tpaths.push(generatePoint(points[i]));\r\n\t\t\t}\r\n\r\n\t\t\tif (props.link.getTargetPort() == null) {\r\n\t\t\t\tpaths.push(generatePoint(points[points.length - 1]));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn <g data-default-link-test={props.link.getOptions().testName}>{paths}</g>;\r\n};\r\n","import * as React from 'react';\r\nimport { DefaultNodeModel } from './DefaultNodeModel';\r\nimport { DefaultNodeWidget } from './DefaultNodeWidget';\r\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core';\r\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\r\n\r\nexport class DefaultNodeFactory extends AbstractReactFactory<DefaultNodeModel, DiagramEngine> {\r\n\tconstructor() {\r\n\t\tsuper('default');\r\n\t}\r\n\r\n\tgenerateReactWidget(event): JSX.Element {\r\n\t\treturn <DefaultNodeWidget engine={this.engine} node={event.model} />;\r\n\t}\r\n\r\n\tgenerateModel(event): DefaultNodeModel {\r\n\t\treturn new DefaultNodeModel();\r\n\t}\r\n}\r\n","import _map from 'lodash/map';\r\nimport { NodeModel, NodeModelGenerics, PortModelAlignment } from '@projectstorm/react-diagrams-core';\r\nimport { DefaultPortModel } from '../port/DefaultPortModel';\r\nimport { BasePositionModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\r\n\r\nexport interface DefaultNodeModelOptions extends BasePositionModelOptions {\r\n\tname?: string;\r\n\tcolor?: string;\r\n}\r\n\r\nexport interface DefaultNodeModelGenerics extends NodeModelGenerics {\r\n\tOPTIONS: DefaultNodeModelOptions;\r\n}\r\n\r\nexport class DefaultNodeModel extends NodeModel<DefaultNodeModelGenerics> {\r\n\tprotected portsIn: DefaultPortModel[];\r\n\tprotected portsOut: DefaultPortModel[];\r\n\r\n\tconstructor(name: string, color: string);\r\n\tconstructor(options?: DefaultNodeModelOptions);\r\n\tconstructor(options: any = {}, color?: string) {\r\n\t\tif (typeof options === 'string') {\r\n\t\t\toptions = {\r\n\t\t\t\tname: options,\r\n\t\t\t\tcolor: color\r\n\t\t\t};\r\n\t\t}\r\n\t\tsuper({\r\n\t\t\ttype: 'default',\r\n\t\t\tname: 'Untitled',\r\n\t\t\tcolor: 'rgb(0,192,255)',\r\n\t\t\t...options\r\n\t\t});\r\n\t\tthis.portsOut = [];\r\n\t\tthis.portsIn = [];\r\n\t}\r\n\r\n\tdoClone(lookupTable: {}, clone: any): void {\r\n\t\tclone.portsIn = [];\r\n\t\tclone.portsOut = [];\r\n\t\tsuper.doClone(lookupTable, clone);\r\n\t}\r\n\r\n\tremovePort(port: DefaultPortModel): void {\r\n\t\tsuper.removePort(port);\r\n\t\tif (port.getOptions().in) {\r\n\t\t\tthis.portsIn.splice(this.portsIn.indexOf(port), 1);\r\n\t\t} else {\r\n\t\t\tthis.portsOut.splice(this.portsOut.indexOf(port), 1);\r\n\t\t}\r\n\t}\r\n\r\n\taddPort<T extends DefaultPortModel>(port: T): T {\r\n\t\tsuper.addPort(port);\r\n\t\tif (port.getOptions().in) {\r\n\t\t\tif (this.portsIn.indexOf(port) === -1) {\r\n\t\t\t\tthis.portsIn.push(port);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (this.portsOut.indexOf(port) === -1) {\r\n\t\t\t\tthis.portsOut.push(port);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn port;\r\n\t}\r\n\r\n\taddInPort(label: string, after = true): DefaultPortModel {\r\n\t\tconst p = new DefaultPortModel({\r\n\t\t\tin: true,\r\n\t\t\tname: label,\r\n\t\t\tlabel: label,\r\n\t\t\talignment: PortModelAlignment.LEFT\r\n\t\t});\r\n\t\tif (!after) {\r\n\t\t\tthis.portsIn.splice(0, 0, p);\r\n\t\t}\r\n\t\treturn this.addPort(p);\r\n\t}\r\n\r\n\taddOutPort(label: string, after = true): DefaultPortModel {\r\n\t\tconst p = new DefaultPortModel({\r\n\t\t\tin: false,\r\n\t\t\tname: label,\r\n\t\t\tlabel: label,\r\n\t\t\talignment: PortModelAlignment.RIGHT\r\n\t\t});\r\n\t\tif (!after) {\r\n\t\t\tthis.portsOut.splice(0, 0, p);\r\n\t\t}\r\n\t\treturn this.addPort(p);\r\n\t}\r\n\r\n\tdeserialize(event: DeserializeEvent<this>) {\r\n\t\tsuper.deserialize(event);\r\n\t\tthis.options.name = event.data.name;\r\n\t\tthis.options.color = event.data.color;\r\n\t\tthis.portsIn = _map(event.data.portsInOrder, (id) => {\r\n\t\t\treturn this.getPortFromID(id);\r\n\t\t}) as DefaultPortModel[];\r\n\t\tthis.portsOut = _map(event.data.portsOutOrder, (id) => {\r\n\t\t\treturn this.getPortFromID(id);\r\n\t\t}) as DefaultPortModel[];\r\n\t}\r\n\r\n\tserialize(): any {\r\n\t\treturn {\r\n\t\t\t...super.serialize(),\r\n\t\t\tname: this.options.name,\r\n\t\t\tcolor: this.options.color,\r\n\t\t\tportsInOrder: _map(this.portsIn, (port) => {\r\n\t\t\t\treturn port.getID();\r\n\t\t\t}),\r\n\t\t\tportsOutOrder: _map(this.portsOut, (port) => {\r\n\t\t\t\treturn port.getID();\r\n\t\t\t})\r\n\t\t};\r\n\t}\r\n\r\n\tgetInPorts(): DefaultPortModel[] {\r\n\t\treturn this.portsIn;\r\n\t}\r\n\r\n\tgetOutPorts(): DefaultPortModel[] {\r\n\t\treturn this.portsOut;\r\n\t}\r\n}\r\n","import * as React from 'react';\r\nimport _map from 'lodash/map';\r\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\r\nimport { DefaultNodeModel } from './DefaultNodeModel';\r\nimport { DefaultPortLabel } from '../port/DefaultPortLabelWidget';\r\nimport styled from '@emotion/styled';\r\n\r\nnamespace S {\r\n\texport const Node = styled.div<{ background: string; selected: boolean }>`\r\n\t\tbackground-color: ${(p) => p.background};\r\n\t\tborder-radius: 5px;\r\n\t\tfont-family: sans-serif;\r\n\t\tcolor: white;\r\n\t\tborder: solid 2px black;\r\n\t\toverflow: visible;\r\n\t\tfont-size: 11px;\r\n\t\tborder: solid 2px ${(p) => (p.selected ? 'rgb(0,192,255)' : 'black')};\r\n\t`;\r\n\r\n\texport const Title = styled.div`\r\n\t\tbackground: rgba(0, 0, 0, 0.3);\r\n\t\tdisplay: flex;\r\n\t\twhite-space: nowrap;\r\n\t\tjustify-items: center;\r\n\t`;\r\n\r\n\texport const TitleName = styled.div`\r\n\t\tflex-grow: 1;\r\n\t\tpadding: 5px 5px;\r\n\t`;\r\n\r\n\texport const Ports = styled.div`\r\n\t\tdisplay: flex;\r\n\t\tbackground-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2));\r\n\t`;\r\n\r\n\texport const PortsContainer = styled.div`\r\n\t\tflex-grow: 1;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\r\n\t\t&:first-of-type {\r\n\t\t\tmargin-right: 10px;\r\n\t\t}\r\n\r\n\t\t&:only-child {\r\n\t\t\tmargin-right: 0px;\r\n\t\t}\r\n\t`;\r\n}\r\n\r\nexport interface DefaultNodeProps {\r\n\tnode: DefaultNodeModel;\r\n\tengine: DiagramEngine;\r\n}\r\n\r\n/**\r\n * Default node that models the DefaultNodeModel. It creates two columns\r\n * for both all the input ports on the left, and the output ports on the right.\r\n */\r\nexport class DefaultNodeWidget extends React.Component<DefaultNodeProps> {\r\n\tgeneratePort = (port) => {\r\n\t\treturn <DefaultPortLabel engine={this.props.engine} port={port} key={port.getID()} />;\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<S.Node\r\n\t\t\t\tdata-default-node-name={this.props.node.getOptions().name}\r\n\t\t\t\tselected={this.props.node.isSelected()}\r\n\t\t\t\tbackground={this.props.node.getOptions().color}\r\n\t\t\t>\r\n\t\t\t\t<S.Title>\r\n\t\t\t\t\t<S.TitleName>{this.props.node.getOptions().name}</S.TitleName>\r\n\t\t\t\t</S.Title>\r\n\t\t\t\t<S.Ports>\r\n\t\t\t\t\t<S.PortsContainer>{_map(this.props.node.getInPorts(), this.generatePort)}</S.PortsContainer>\r\n\t\t\t\t\t<S.PortsContainer>{_map(this.props.node.getOutPorts(), this.generatePort)}</S.PortsContainer>\r\n\t\t\t\t</S.Ports>\r\n\t\t\t</S.Node>\r\n\t\t);\r\n\t}\r\n}\r\n","import { DefaultPortModel } from './DefaultPortModel';\r\nimport { AbstractModelFactory } from '@projectstorm/react-canvas-core';\r\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\r\n\r\nexport class DefaultPortFactory extends AbstractModelFactory<DefaultPortModel, DiagramEngine> {\r\n\tconstructor() {\r\n\t\tsuper('default');\r\n\t}\r\n\r\n\tgenerateModel(): DefaultPortModel {\r\n\t\treturn new DefaultPortModel({\r\n\t\t\tname: 'unknown'\r\n\t\t});\r\n\t}\r\n}\r\n","import * as React from 'react';\r\nimport { DiagramEngine, PortWidget } from '@projectstorm/react-diagrams-core';\r\nimport { DefaultPortModel } from './DefaultPortModel';\r\nimport styled from '@emotion/styled';\r\n\r\nexport interface DefaultPortLabelProps {\r\n\tport: DefaultPortModel;\r\n\tengine: DiagramEngine;\r\n}\r\n\r\nnamespace S {\r\n\texport const PortLabel = styled.div`\r\n\t\tdisplay: flex;\r\n\t\tmargin-top: 1px;\r\n\t\talign-items: center;\r\n\t`;\r\n\r\n\texport const Label = styled.div`\r\n\t\tpadding: 0 5px;\r\n\t\tflex-grow: 1;\r\n\t`;\r\n\r\n\texport const Port = styled.div`\r\n\t\twidth: 15px;\r\n\t\theight: 15px;\r\n\t\tbackground: rgba(255, 255, 255, 0.1);\r\n\r\n\t\t&:hover {\r\n\t\t\tbackground: rgb(192, 255, 0);\r\n\t\t}\r\n\t`;\r\n}\r\n\r\nexport class DefaultPortLabel extends React.Component<DefaultPortLabelProps> {\r\n\trender() {\r\n\t\tconst port = (\r\n\t\t\t<PortWidget engine={this.props.engine} port={this.props.port}>\r\n\t\t\t\t<S.Port />\r\n\t\t\t</PortWidget>\r\n\t\t);\r\n\t\tconst label = <S.Label>{this.props.port.getOptions().label}</S.Label>;\r\n\r\n\t\treturn (\r\n\t\t\t<S.PortLabel>\r\n\t\t\t\t{this.props.port.getOptions().in ? port : label}\r\n\t\t\t\t{this.props.port.getOptions().in ? label : port}\r\n\t\t\t</S.PortLabel>\r\n\t\t);\r\n\t}\r\n}\r\n","import {\r\n\tLinkModel,\r\n\tPortModel,\r\n\tPortModelAlignment,\r\n\tPortModelGenerics,\r\n\tPortModelOptions\r\n} from '@projectstorm/react-diagrams-core';\r\nimport { DefaultLinkModel } from '../link/DefaultLinkModel';\r\nimport { AbstractModelFactory, DeserializeEvent } from '@projectstorm/react-canvas-core';\r\n\r\nexport interface DefaultPortModelOptions extends PortModelOptions {\r\n\tlabel?: string;\r\n\tin?: boolean;\r\n\ttype?: string;\r\n}\r\n\r\nexport interface DefaultPortModelGenerics extends PortModelGenerics {\r\n\tOPTIONS: DefaultPortModelOptions;\r\n}\r\n\r\nexport class DefaultPortModel extends PortModel<DefaultPortModelGenerics> {\r\n\tconstructor(isIn: boolean, name?: string, label?: string);\r\n\tconstructor(options: DefaultPortModelOptions);\r\n\tconstructor(options: DefaultPortModelOptions | boolean, name?: string, label?: string) {\r\n\t\tif (!!name) {\r\n\t\t\toptions = {\r\n\t\t\t\tin: !!options,\r\n\t\t\t\tname: name,\r\n\t\t\t\tlabel: label\r\n\t\t\t};\r\n\t\t}\r\n\t\toptions = options as DefaultPortModelOptions;\r\n\t\tsuper({\r\n\t\t\tlabel: options.label || options.name,\r\n\t\t\talignment: options.in ? PortModelAlignment.LEFT : PortModelAlignment.RIGHT,\r\n\t\t\ttype: 'default',\r\n\t\t\t...options\r\n\t\t});\r\n\t}\r\n\r\n\tdeserialize(event: DeserializeEvent<this>) {\r\n\t\tsuper.deserialize(event);\r\n\t\tthis.options.in = event.data.in;\r\n\t\tthis.options.label = event.data.label;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn {\r\n\t\t\t...super.serialize(),\r\n\t\t\tin: this.options.in,\r\n\t\t\tlabel: this.options.label\r\n\t\t};\r\n\t}\r\n\r\n\tlink<T extends LinkModel>(port: PortModel, factory?: AbstractModelFactory<T>): T {\r\n\t\tlet link = this.createLinkModel(factory);\r\n\t\tlink.setSourcePort(this);\r\n\t\tlink.setTargetPort(port);\r\n\t\treturn link as T;\r\n\t}\r\n\r\n\tcanLinkToPort(port: PortModel): boolean {\r\n\t\tif (port instanceof DefaultPortModel) {\r\n\t\t\treturn this.options.in !== port.getOptions().in;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tcreateLinkModel(factory?: AbstractModelFactory<LinkModel>): LinkModel {\r\n\t\tlet link = super.createLinkModel();\r\n\t\tif (!link && factory) {\r\n\t\t\treturn factory.generateModel({});\r\n\t\t}\r\n\t\treturn link || new DefaultLinkModel();\r\n\t}\r\n}\r\n","module.exports = require(\"@emotion/react\");","module.exports = require(\"@emotion/styled\");","module.exports = require(\"@projectstorm/geometry\");","module.exports = require(\"@projectstorm/react-canvas-core\");","module.exports = require(\"@projectstorm/react-diagrams-core\");","module.exports = require(\"lodash/map\");","module.exports = require(\"react\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export * from './label/DefaultLabelFactory';\r\nexport * from './label/DefaultLabelModel';\r\nexport * from './label/DefaultLabelWidget';\r\n\r\nexport * from './link/DefaultLinkFactory';\r\nexport * from './link/DefaultLinkModel';\r\nexport * from './link/DefaultLinkWidget';\r\nexport * from './link/DefaultLinkSegmentWidget';\r\nexport * from './link/DefaultLinkPointWidget';\r\n\r\nexport * from './node/DefaultNodeFactory';\r\nexport * from './node/DefaultNodeModel';\r\nexport * from './node/DefaultNodeWidget';\r\n\r\nexport * from './port/DefaultPortFactory';\r\nexport * from './port/DefaultPortLabelWidget';\r\nexport * from './port/DefaultPortModel';\r\n"],"names":[],"sourceRoot":""}
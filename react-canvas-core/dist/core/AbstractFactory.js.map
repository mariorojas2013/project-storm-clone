{"version":3,"file":"AbstractFactory.js","sourceRoot":"","sources":["../../src/core/AbstractFactory.ts"],"names":[],"mappings":"AAGA;;;GAGG;AACH,MAAM,OAAgB,eAAe;IAWpC,YAAY,IAAY;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IAClB,CAAC;IAED,gBAAgB,CAAC,MAAS;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACtB,CAAC;IAED,cAAc,CAAC,IAAiB;QAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IAClB,CAAC;IAED,OAAO;QACN,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;CACD","sourcesContent":["import { CanvasEngine } from '../CanvasEngine';\r\nimport { FactoryBank } from './FactoryBank';\r\n\r\n/**\r\n * Base factory for all the different types of entities.\r\n * Gets registered with the engine, and is used to generate models\r\n */\r\nexport abstract class AbstractFactory<E extends CanvasEngine = CanvasEngine> {\r\n\t/**\r\n\t * Couples the factory with the models it generates\r\n\t */\r\n\tprotected type: string;\r\n\t/**\r\n\t * The engine gets injected when the factory is registered\r\n\t */\r\n\tprotected engine: E;\r\n\tprotected bank: FactoryBank;\r\n\r\n\tconstructor(type: string) {\r\n\t\tthis.type = type;\r\n\t}\r\n\r\n\tsetDiagramEngine(engine: E) {\r\n\t\tthis.engine = engine;\r\n\t}\r\n\r\n\tsetFactoryBank(bank: FactoryBank) {\r\n\t\tthis.bank = bank;\r\n\t}\r\n\r\n\tgetType(): string {\r\n\t\treturn this.type;\r\n\t}\r\n}\r\n"]}
{"version":3,"file":"FactoryBank.js","sourceRoot":"","sources":["../../src/core/FactoryBank.ts"],"names":[],"mappings":"AAAA,OAAO,EAA2B,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAEvE,OAAO,OAAO,MAAM,eAAe,CAAC;AAcpC;;GAEG;AACH,MAAM,OAAO,WAGX,SAAQ,YAAe;IAGxB;QACC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACrB,CAAC;IAED,YAAY;QACX,OAAO,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAChC,CAAC;IAED,cAAc;QACb,KAAK,IAAI,OAAO,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACpC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACjC,CAAC;IACF,CAAC;IAED,UAAU,CAAkB,IAAY;QACvC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;YAC3B,MAAM,IAAI,KAAK,CAAC,kCAAkC,IAAI,GAAG,CAAC,CAAC;QAC5D,CAAC;QACD,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAM,CAAC;IAClC,CAAC;IAED,eAAe,CAAC,OAAU;QACzB,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,GAAG,OAAO,CAAC;QAC5C,aAAa;QACb,IAAI,CAAC,SAAS,CAAiB,EAAE,OAAO,EAAS,EAAE,cAAc,CAAC,CAAC;IACpE,CAAC;IAED,iBAAiB,CAAC,IAAY;QAC7B,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACrC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC5B,aAAa;QACb,IAAI,CAAC,SAAS,CAAmB,EAAE,OAAO,EAAS,EAAE,gBAAgB,CAAC,CAAC;IACxE,CAAC;CACD","sourcesContent":["import { BaseEvent, BaseListener, BaseObserver } from './BaseObserver';\r\nimport { AbstractFactory } from './AbstractFactory';\r\nimport _values from 'lodash/values';\r\n\r\nexport interface FactoryBankListener<F extends AbstractFactory = AbstractFactory> extends BaseListener {\r\n\t/**\r\n\t * Factory as added to rhe bank\r\n\t */\r\n\tfactoryAdded?: (event: BaseEvent & { factory: F }) => any;\r\n\r\n\t/**\r\n\t * Factory was removed from the bank\r\n\t */\r\n\tfactoryRemoved?: (event: BaseEvent & { factory: F }) => any;\r\n}\r\n\r\n/**\r\n * Store and managed Factories that extend from Abstractfactory\r\n */\r\nexport class FactoryBank<\r\n\tF extends AbstractFactory = AbstractFactory,\r\n\tL extends FactoryBankListener<F> = FactoryBankListener<F>\r\n> extends BaseObserver<L> {\r\n\tprotected factories: { [type: string]: F };\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.factories = {};\r\n\t}\r\n\r\n\tgetFactories(): F[] {\r\n\t\treturn _values(this.factories);\r\n\t}\r\n\r\n\tclearFactories() {\r\n\t\tfor (let factory in this.factories) {\r\n\t\t\tthis.deregisterFactory(factory);\r\n\t\t}\r\n\t}\r\n\r\n\tgetFactory<T extends F = F>(type: string): T {\r\n\t\tif (!this.factories[type]) {\r\n\t\t\tthrow new Error(`Cannot find factory with type [${type}]`);\r\n\t\t}\r\n\t\treturn this.factories[type] as T;\r\n\t}\r\n\r\n\tregisterFactory(factory: F) {\r\n\t\tfactory.setFactoryBank(this);\r\n\t\tthis.factories[factory.getType()] = factory;\r\n\t\t// todo fixme\r\n\t\tthis.fireEvent<'factoryAdded'>({ factory } as any, 'factoryAdded');\r\n\t}\r\n\r\n\tderegisterFactory(type: string) {\r\n\t\tconst factory = this.factories[type];\r\n\t\tfactory.setFactoryBank(null);\r\n\t\tdelete this.factories[type];\r\n\t\t// todo fixme\r\n\t\tthis.fireEvent<'factoryRemoved'>({ factory } as any, 'factoryRemoved');\r\n\t}\r\n}\r\n"]}
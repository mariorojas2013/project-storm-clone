{"version":3,"file":"PortModel.js","sourceRoot":"","sources":["../../../src/entities/port/PortModel.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeModel } from '../node/NodeModel';\r\nimport { LinkModel } from '../link/LinkModel';\r\nimport _forEach from 'lodash/forEach';\r\nimport _isFinite from 'lodash/isFinite';\r\nimport _map from 'lodash/map';\r\nimport _size from 'lodash/size';\r\nimport _values from 'lodash/values';\r\nimport { Point, Rectangle } from '@projectstorm/geometry';\r\nimport {\r\n\tBaseEntityEvent,\r\n\tBaseModelOptions,\r\n\tBasePositionModel,\r\n\tBasePositionModelGenerics,\r\n\tBasePositionModelListener,\r\n\tDeserializeEvent\r\n} from '@projectstorm/react-canvas-core';\r\n\r\nexport enum PortModelAlignment {\r\n\tTOP = 'top',\r\n\tLEFT = 'left',\r\n\tBOTTOM = 'bottom',\r\n\tRIGHT = 'right'\r\n}\r\n\r\nexport interface PortModelListener extends BasePositionModelListener {\r\n\t/**\r\n\t * fires when it first receives positional information\r\n\t */\r\n\treportInitialPosition?: (event: BaseEntityEvent<PortModel>) => void;\r\n}\r\n\r\nexport interface PortModelOptions extends BaseModelOptions {\r\n\talignment?: PortModelAlignment;\r\n\tmaximumLinks?: number;\r\n\tname: string;\r\n}\r\n\r\nexport interface PortModelGenerics extends BasePositionModelGenerics {\r\n\tOPTIONS: PortModelOptions;\r\n\tPARENT: NodeModel;\r\n\tLISTENER: PortModelListener;\r\n}\r\n\r\nexport class PortModel<G extends PortModelGenerics = PortModelGenerics> extends BasePositionModel<G> {\r\n\tlinks: { [id: string]: LinkModel };\r\n\r\n\t// calculated post rendering so routing can be done correctly\r\n\twidth: number;\r\n\theight: number;\r\n\treportedPosition: boolean;\r\n\r\n\tconstructor(options: G['OPTIONS']) {\r\n\t\tsuper(options);\r\n\t\tthis.links = {};\r\n\t\tthis.reportedPosition = false;\r\n\t}\r\n\r\n\tdeserialize(event: DeserializeEvent<this>) {\r\n\t\tsuper.deserialize(event);\r\n\t\tthis.reportedPosition = false;\r\n\t\tthis.options.name = event.data.name;\r\n\t\tthis.options.alignment = event.data.alignment;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn {\r\n\t\t\t...super.serialize(),\r\n\t\t\tname: this.options.name,\r\n\t\t\talignment: this.options.alignment,\r\n\t\t\tparentNode: this.parent.getID(),\r\n\t\t\tlinks: _map(this.links, (link) => {\r\n\t\t\t\treturn link.getID();\r\n\t\t\t})\r\n\t\t};\r\n\t}\r\n\r\n\tsetPosition(point: Point);\r\n\tsetPosition(x: number, y: number);\r\n\tsetPosition(x, y?) {\r\n\t\tlet old = this.position;\r\n\t\tsuper.setPosition(x, y);\r\n\t\t_forEach(this.getLinks(), (link) => {\r\n\t\t\tlet point = link.getPointForPort(this);\r\n\t\t\tpoint.setPosition(point.getX() + x - old.x, point.getY() + y - old.y);\r\n\t\t});\r\n\t}\r\n\r\n\tdoClone(lookupTable = {}, clone: PortModel) {\r\n\t\tclone.links = {};\r\n\t\tclone.parent = this.getParent().clone(lookupTable);\r\n\t}\r\n\r\n\tgetNode(): NodeModel {\r\n\t\treturn this.getParent();\r\n\t}\r\n\r\n\tgetName(): string {\r\n\t\treturn this.options.name;\r\n\t}\r\n\r\n\tgetMaximumLinks(): number {\r\n\t\treturn this.options.maximumLinks;\r\n\t}\r\n\r\n\tsetMaximumLinks(maximumLinks: number) {\r\n\t\tthis.options.maximumLinks = maximumLinks;\r\n\t}\r\n\r\n\tremoveLink(link: LinkModel) {\r\n\t\tdelete this.links[link.getID()];\r\n\t}\r\n\r\n\taddLink(link: LinkModel) {\r\n\t\tthis.links[link.getID()] = link;\r\n\t}\r\n\r\n\tgetLinks(): { [id: string]: LinkModel } {\r\n\t\treturn this.links;\r\n\t}\r\n\r\n\tpublic createLinkModel(): LinkModel | null {\r\n\t\tif (_isFinite(this.options.maximumLinks)) {\r\n\t\t\tvar numberOfLinks: number = _size(this.links);\r\n\t\t\tif (this.options.maximumLinks === 1 && numberOfLinks >= 1) {\r\n\t\t\t\treturn _values(this.links)[0];\r\n\t\t\t} else if (numberOfLinks >= this.options.maximumLinks) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\treportPosition() {\r\n\t\t_forEach(this.getLinks(), (link) => {\r\n\t\t\tlink.getPointForPort(this).setPosition(this.getCenter());\r\n\t\t});\r\n\t\tthis.fireEvent(\r\n\t\t\t{\r\n\t\t\t\tentity: this\r\n\t\t\t},\r\n\t\t\t'reportInitialPosition'\r\n\t\t);\r\n\t}\r\n\r\n\tgetCenter(): Point {\r\n\t\treturn new Point(this.getX() + this.width / 2, this.getY() + this.height / 2);\r\n\t}\r\n\r\n\tgetBoundingBox(): Rectangle {\r\n\t\treturn Rectangle.fromPointAndSize(this.position, this.width, this.height);\r\n\t}\r\n\r\n\tupdateCoords(coords: Rectangle) {\r\n\t\tthis.width = coords.getWidth();\r\n\t\tthis.height = coords.getHeight();\r\n\t\tthis.setPosition(coords.getTopLeft());\r\n\t\tthis.reportedPosition = true;\r\n\t\tthis.reportPosition();\r\n\t}\r\n\r\n\tcanLinkToPort(port: PortModel): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tisLocked() {\r\n\t\treturn super.isLocked() || this.getParent().isLocked();\r\n\t}\r\n}\r\n"]}
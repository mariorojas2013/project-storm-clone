{"version":3,"file":"PathFinding.js","sourceRoot":"","sources":["../../src/engine/PathFinding.ts"],"names":[],"mappings":"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","sourcesContent":["import * as PF from 'pathfinding';\r\nimport { PathFindingLinkFactory } from '../link/PathFindingLinkFactory';\r\nimport { PointModel } from '@projectstorm/react-diagrams-core';\r\n\r\n/*\r\nit can be very expensive to calculate routes when every single pixel on the canvas\r\nis individually represented. Using the factor below, we combine values in order\r\nto achieve the best trade-off between accuracy and performance.\r\n*/\r\n\r\nconst pathFinderInstance = new PF.JumpPointFinder({\r\n\theuristic: PF.Heuristic.manhattan,\r\n\tdiagonalMovement: PF.DiagonalMovement.Never\r\n});\r\n\r\nexport class PathFinding {\r\n\tinstance: any;\r\n\tfactory: PathFindingLinkFactory;\r\n\r\n\tconstructor(factory: PathFindingLinkFactory) {\r\n\t\tthis.instance = pathFinderInstance;\r\n\t\tthis.factory = factory;\r\n\t}\r\n\r\n\t/**\r\n\t * Taking as argument a fully unblocked walking matrix, this method\r\n\t * finds a direct path from point A to B.\r\n\t */\r\n\tcalculateDirectPath(from: PointModel, to: PointModel): number[][] {\r\n\t\tconst matrix = this.factory.getCanvasMatrix();\r\n\t\tconst grid = new PF.Grid(matrix);\r\n\r\n\t\treturn pathFinderInstance.findPath(\r\n\t\t\tthis.factory.translateRoutingX(Math.floor(from.getX() / this.factory.ROUTING_SCALING_FACTOR)),\r\n\t\t\tthis.factory.translateRoutingY(Math.floor(from.getY() / this.factory.ROUTING_SCALING_FACTOR)),\r\n\t\t\tthis.factory.translateRoutingX(Math.floor(to.getX() / this.factory.ROUTING_SCALING_FACTOR)),\r\n\t\t\tthis.factory.translateRoutingY(Math.floor(to.getY() / this.factory.ROUTING_SCALING_FACTOR)),\r\n\t\t\tgrid\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Using @link{#calculateDirectPath}'s result as input, we here\r\n\t * determine the first walkable point found in the matrix that includes\r\n\t * blocked paths.\r\n\t */\r\n\tcalculateLinkStartEndCoords(\r\n\t\tmatrix: number[][],\r\n\t\tpath: number[][]\r\n\t): {\r\n\t\tstart: {\r\n\t\t\tx: number;\r\n\t\t\ty: number;\r\n\t\t};\r\n\t\tend: {\r\n\t\t\tx: number;\r\n\t\t\ty: number;\r\n\t\t};\r\n\t\tpathToStart: number[][];\r\n\t\tpathToEnd: number[][];\r\n\t} {\r\n\t\tconst startIndex = path.findIndex((point) => {\r\n\t\t\tif (matrix[point[1]]) return matrix[point[1]][point[0]] === 0;\r\n\t\t\telse return false;\r\n\t\t});\r\n\t\tconst endIndex =\r\n\t\t\tpath.length -\r\n\t\t\t1 -\r\n\t\t\tpath\r\n\t\t\t\t.slice()\r\n\t\t\t\t.reverse()\r\n\t\t\t\t.findIndex((point) => {\r\n\t\t\t\t\tif (matrix[point[1]]) return matrix[point[1]][point[0]] === 0;\r\n\t\t\t\t\telse return false;\r\n\t\t\t\t});\r\n\r\n\t\t// are we trying to create a path exclusively through blocked areas?\r\n\t\t// if so, let's fallback to the linear routing\r\n\t\tif (startIndex === -1 || endIndex === -1) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tconst pathToStart = path.slice(0, startIndex);\r\n\t\tconst pathToEnd = path.slice(endIndex);\r\n\r\n\t\treturn {\r\n\t\t\tstart: {\r\n\t\t\t\tx: path[startIndex][0],\r\n\t\t\t\ty: path[startIndex][1]\r\n\t\t\t},\r\n\t\t\tend: {\r\n\t\t\t\tx: path[endIndex][0],\r\n\t\t\t\ty: path[endIndex][1]\r\n\t\t\t},\r\n\t\t\tpathToStart,\r\n\t\t\tpathToEnd\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Puts everything together: merges the paths from/to the centre of the ports,\r\n\t * with the path calculated around other elements.\r\n\t */\r\n\tcalculateDynamicPath(\r\n\t\troutingMatrix: number[][],\r\n\t\tstart: {\r\n\t\t\tx: number;\r\n\t\t\ty: number;\r\n\t\t},\r\n\t\tend: {\r\n\t\t\tx: number;\r\n\t\t\ty: number;\r\n\t\t},\r\n\t\tpathToStart: number[][],\r\n\t\tpathToEnd: number[][]\r\n\t) {\r\n\t\t// generate the path based on the matrix with obstacles\r\n\t\tconst grid = new PF.Grid(routingMatrix);\r\n\t\tconst dynamicPath = pathFinderInstance.findPath(start.x, start.y, end.x, end.y, grid);\r\n\r\n\t\t// aggregate everything to have the calculated path ready for rendering\r\n\t\tconst pathCoords = pathToStart\r\n\t\t\t.concat(dynamicPath, pathToEnd)\r\n\t\t\t.map((coords) => [\r\n\t\t\t\tthis.factory.translateRoutingX(coords[0], true),\r\n\t\t\t\tthis.factory.translateRoutingY(coords[1], true)\r\n\t\t\t]);\r\n\t\treturn PF.Util.compressPath(pathCoords);\r\n\t}\r\n}\r\n"]}